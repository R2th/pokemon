{"ast":null,"code":"import{useRecoilValue}from\"recoil\";import{useGameActions}from\"../../hooks/useGameActions\";import selectedPokemonsState from\"../../recoil/atoms/selectedPokemonsState\";import PokemonCard from\"./PokemonCard\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var PokemonRow=function PokemonRow(_ref){var pokemons=_ref.pokemons,rowIndex=_ref.rowIndex,mode=_ref.mode,status=_ref.status;var selectedPokemons=useRecoilValue(selectedPokemonsState);var _useGameActions=useGameActions(mode),selectPokemon=_useGameActions.selectPokemon;return/*#__PURE__*/_jsx(_Fragment,{children:pokemons.map(function(pokemon,index){return/*#__PURE__*/_jsx(PokemonCard,{pokemon:pokemon,rowIndex:rowIndex,colIndex:index,isSelected:pokemon.nid!==undefined&&selectedPokemons.findIndex(function(_ref2){var nid=_ref2.nid;return nid===pokemon.nid;})>=0,selectPokemon:selectPokemon,status:status},\"card-\".concat(index));})});};export default PokemonRow;","map":{"version":3,"sources":["E:/Desktop/game-pikachu-v2/src/components/Game/PokemonRow.tsx"],"names":["useRecoilValue","useGameActions","selectedPokemonsState","PokemonCard","PokemonRow","pokemons","rowIndex","mode","status","selectedPokemons","selectPokemon","map","pokemon","index","nid","undefined","findIndex"],"mappings":"AAEA,OAASA,cAAT,KAA+B,QAA/B,CACA,OAASC,cAAT,KAA+B,4BAA/B,CACA,MAAOC,CAAAA,qBAAP,KAAkC,0CAAlC,CAGA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,C,gGASA,GAAMC,CAAAA,UAA+B,CAAG,QAAlCA,CAAAA,UAAkC,MAKlC,IAJJC,CAAAA,QAII,MAJJA,QAII,CAHJC,QAGI,MAHJA,QAGI,CAFJC,IAEI,MAFJA,IAEI,CADJC,MACI,MADJA,MACI,CACJ,GAAMC,CAAAA,gBAAgB,CAAGT,cAAc,CAACE,qBAAD,CAAvC,CACA,oBAA0BD,cAAc,CAACM,IAAD,CAAxC,CAAQG,aAAR,iBAAQA,aAAR,CACA,mBACE,yBACGL,QAAQ,CAACM,GAAT,CAAa,SAACC,OAAD,CAAUC,KAAV,qBACZ,KAAC,WAAD,EAEE,OAAO,CAAED,OAFX,CAGE,QAAQ,CAAEN,QAHZ,CAIE,QAAQ,CAAEO,KAJZ,CAKE,UAAU,CACRD,OAAO,CAACE,GAAR,GAAgBC,SAAhB,EACAN,gBAAgB,CAACO,SAAjB,CAA2B,mBAAGF,CAAAA,GAAH,OAAGA,GAAH,OAAaA,CAAAA,GAAG,GAAKF,OAAO,CAACE,GAA7B,EAA3B,GAAgE,CAPpE,CASE,aAAa,CAAEJ,aATjB,CAUE,MAAM,CAAEF,MAVV,iBACeK,KADf,EADY,EAAb,CADH,EADF,CAkBD,CA1BD,CA4BA,cAAeT,CAAAA,UAAf","sourcesContent":["import { FC } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { useGameActions } from \"../../hooks/useGameActions\";\r\nimport selectedPokemonsState from \"../../recoil/atoms/selectedPokemonsState\";\r\n\r\nimport { GameMode, GameStatus, Pokemon } from \"../../types/game\";\r\nimport PokemonCard from \"./PokemonCard\";\r\n\r\ntype PokemonRowProps = {\r\n  pokemons: Pokemon[];\r\n  rowIndex: number;\r\n  mode: GameMode;\r\n  status: GameStatus;\r\n};\r\n\r\nconst PokemonRow: FC<PokemonRowProps> = ({\r\n  pokemons,\r\n  rowIndex,\r\n  mode,\r\n  status,\r\n}) => {\r\n  const selectedPokemons = useRecoilValue(selectedPokemonsState);\r\n  const { selectPokemon } = useGameActions(mode);\r\n  return (\r\n    <>\r\n      {pokemons.map((pokemon, index) => (\r\n        <PokemonCard\r\n          key={`card-${index}`}\r\n          pokemon={pokemon}\r\n          rowIndex={rowIndex}\r\n          colIndex={index}\r\n          isSelected={\r\n            pokemon.nid !== undefined &&\r\n            selectedPokemons.findIndex(({ nid }) => nid === pokemon.nid) >= 0\r\n          }\r\n          selectPokemon={selectPokemon}\r\n          status={status}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PokemonRow;\r\n"]},"metadata":{},"sourceType":"module"}