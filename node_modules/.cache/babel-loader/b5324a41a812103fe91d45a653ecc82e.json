{"ast":null,"code":"import _objectSpread from\"E:/Desktop/game-pikachu-v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useRecoilValue,useResetRecoilState,useSetRecoilState}from\"recoil\";import gameState from\"../recoil/atoms/gameState\";import selectedPokemonsSelector from\"../recoil/selectors/selectedPokemonsSelector\";import selectedPokemonsState from\"../recoil/atoms/selectedPokemonsState\";import gameOverlayState from\"../recoil/atoms/gameOverlayState\";import gameSoundState from\"../recoil/atoms/gameSoundState\";import{useCallback}from\"react\";import{GameLevel,GameMode,gameOptions,GameStatus}from\"../types/game\";import{generatePokemonMatrix,makeListPokemons}from\"../utils/game\";import{addNewRanking,updateNewRanking}from\"../api/ranking\";import playerState from\"../recoil/atoms/playerState\";import{nanoid}from\"nanoid\";export function useGameActions(mode){var setGame=useSetRecoilState(gameState);var setPlayer=useSetRecoilState(playerState);var setSelectedPokemons=useSetRecoilState(selectedPokemonsSelector);var resetGameState=useResetRecoilState(gameState);var resetGameOverlayState=useResetRecoilState(gameOverlayState);var resetSelectedPokemonsState=useResetRecoilState(selectedPokemonsState);var _useRecoilValue=useRecoilValue(gameSoundState),playBiteSound=_useRecoilValue.playBiteSound,playFanfareSound=_useRecoilValue.playFanfareSound,playNearlyEndTimeSound=_useRecoilValue.playNearlyEndTimeSound;var selectPokemon=function selectPokemon(pokemonId,rowIndex,colIndex){playBiteSound&&playBiteSound();setSelectedPokemons({nid:pokemonId,rowIndex:rowIndex,colIndex:colIndex});};var resetGame=function resetGame(){resetGameState();resetGameOverlayState();resetSelectedPokemonsState();};var initGame=useCallback(function(level){var status=arguments.length>1&&arguments[1]!==undefined?arguments[1]:GameStatus.PENDING;var _gameOptions$level=gameOptions[level],row=_gameOptions$level.row,col=_gameOptions$level.col;var pokemons=makeListPokemons(row,col);var _generatePokemonMatri=generatePokemonMatrix(pokemons,row,col),pokemonMatrix=_generatePokemonMatri.pokemonMatrix,newPokemons=_generatePokemonMatri.pokemons;setGame({pokemons:newPokemons,matrix:pokemonMatrix,level:level,row:row,col:col,status:status});// setPlayer((currentPlayer) => ({ ...currentPlayer, playerTiming: 0 }));\n},[setGame]);var replayGame=function replayGame(playerName){// playFanfareSound && playFanfareSound();\ninitGame(GameLevel.LEVEL_1);// addNewRankingScore(mode, playerName);\n};var endGame=function endGame(){if(mode===GameMode.SURVIVAL_MODE){playNearlyEndTimeSound&&playNearlyEndTimeSound();setGame(function(prevGame){return _objectSpread(_objectSpread({},prevGame),{},{status:GameStatus.COMPLETED});});}};var addNewRankingScore=function addNewRankingScore(mode,playerName){var playerScore={mode:mode,playerName:playerName,timestamp:Date.now()};addNewRanking(playerScore).then(function(response){setPlayer(function(prevPlayer){var _response$id;return _objectSpread(_objectSpread({},prevPlayer),{},{rankingId:(_response$id=response.id)!==null&&_response$id!==void 0?_response$id:nanoid()});});});};var updateNewRankingScore=function updateNewRankingScore(id,mode,playerName,timing){var playerScore={mode:mode,playerName:playerName,timing:timing,timestamp:Date.now()};updateNewRanking(id,playerScore);};var startGame=function startGame(){setGame(function(prevGame){return _objectSpread(_objectSpread({},prevGame),{},{status:GameStatus.RUNNING});});};return{initGame:initGame,replayGame:replayGame,startGame:startGame,endGame:endGame,selectPokemon:selectPokemon,resetGame:resetGame,addNewRankingScore:addNewRankingScore,updateNewRankingScore:updateNewRankingScore};}","map":{"version":3,"sources":["E:/Desktop/game-pikachu-v2/src/hooks/useGameActions.ts"],"names":["useRecoilValue","useResetRecoilState","useSetRecoilState","gameState","selectedPokemonsSelector","selectedPokemonsState","gameOverlayState","gameSoundState","useCallback","GameLevel","GameMode","gameOptions","GameStatus","generatePokemonMatrix","makeListPokemons","addNewRanking","updateNewRanking","playerState","nanoid","useGameActions","mode","setGame","setPlayer","setSelectedPokemons","resetGameState","resetGameOverlayState","resetSelectedPokemonsState","playBiteSound","playFanfareSound","playNearlyEndTimeSound","selectPokemon","pokemonId","rowIndex","colIndex","nid","resetGame","initGame","level","status","PENDING","row","col","pokemons","pokemonMatrix","newPokemons","matrix","replayGame","playerName","LEVEL_1","endGame","SURVIVAL_MODE","prevGame","COMPLETED","addNewRankingScore","playerScore","timestamp","Date","now","then","response","prevPlayer","rankingId","id","updateNewRankingScore","timing","startGame","RUNNING"],"mappings":"gJAAA,OAASA,cAAT,CAAyBC,mBAAzB,CAA8CC,iBAA9C,KAAuE,QAAvE,CACA,MAAOC,CAAAA,SAAP,KAAsB,2BAAtB,CACA,MAAOC,CAAAA,wBAAP,KAAqC,8CAArC,CACA,MAAOC,CAAAA,qBAAP,KAAkC,uCAAlC,CACA,MAAOC,CAAAA,gBAAP,KAA6B,kCAA7B,CACA,MAAOC,CAAAA,cAAP,KAA2B,gCAA3B,CACA,OAASC,WAAT,KAA4B,OAA5B,CACA,OAASC,SAAT,CAAoBC,QAApB,CAA8BC,WAA9B,CAA2CC,UAA3C,KAA6D,eAA7D,CACA,OAASC,qBAAT,CAAgCC,gBAAhC,KAAwD,eAAxD,CACA,OAASC,aAAT,CAAmCC,gBAAnC,KAA2D,gBAA3D,CACA,MAAOC,CAAAA,WAAP,KAAwB,6BAAxB,CACA,OAASC,MAAT,KAAuB,QAAvB,CAEA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,IAAxB,CAAwC,CAC7C,GAAMC,CAAAA,OAAO,CAAGnB,iBAAiB,CAACC,SAAD,CAAjC,CACA,GAAMmB,CAAAA,SAAS,CAAGpB,iBAAiB,CAACe,WAAD,CAAnC,CACA,GAAMM,CAAAA,mBAAmB,CAAGrB,iBAAiB,CAACE,wBAAD,CAA7C,CACA,GAAMoB,CAAAA,cAAc,CAAGvB,mBAAmB,CAACE,SAAD,CAA1C,CACA,GAAMsB,CAAAA,qBAAqB,CAAGxB,mBAAmB,CAACK,gBAAD,CAAjD,CACA,GAAMoB,CAAAA,0BAA0B,CAAGzB,mBAAmB,CAACI,qBAAD,CAAtD,CACA,oBACEL,cAAc,CAACO,cAAD,CADhB,CAAQoB,aAAR,iBAAQA,aAAR,CAAuBC,gBAAvB,iBAAuBA,gBAAvB,CAAyCC,sBAAzC,iBAAyCA,sBAAzC,CAGA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CACpBC,SADoB,CAEpBC,QAFoB,CAGpBC,QAHoB,CAIjB,CACHN,aAAa,EAAIA,aAAa,EAA9B,CACAJ,mBAAmB,CAAC,CAAEW,GAAG,CAAEH,SAAP,CAAkBC,QAAQ,CAARA,QAAlB,CAA4BC,QAAQ,CAARA,QAA5B,CAAD,CAAnB,CACD,CAPD,CASA,GAAME,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtBX,cAAc,GACdC,qBAAqB,GACrBC,0BAA0B,GAC3B,CAJD,CAMA,GAAMU,CAAAA,QAAQ,CAAG5B,WAAW,CAC1B,SAAC6B,KAAD,CAA+D,IAA5CC,CAAAA,MAA4C,2DAAvB1B,UAAU,CAAC2B,OAAY,CAC7D,uBAAqB5B,WAAW,CAAC0B,KAAD,CAAhC,CAAQG,GAAR,oBAAQA,GAAR,CAAaC,GAAb,oBAAaA,GAAb,CACA,GAAMC,CAAAA,QAAQ,CAAG5B,gBAAgB,CAAC0B,GAAD,CAAMC,GAAN,CAAjC,CACA,0BAAiD5B,qBAAqB,CACpE6B,QADoE,CAEpEF,GAFoE,CAGpEC,GAHoE,CAAtE,CAAQE,aAAR,uBAAQA,aAAR,CAAiCC,WAAjC,uBAAuBF,QAAvB,CAKArB,OAAO,CAAC,CACNqB,QAAQ,CAAEE,WADJ,CAENC,MAAM,CAAEF,aAFF,CAGNN,KAAK,CAALA,KAHM,CAING,GAAG,CAAHA,GAJM,CAKNC,GAAG,CAAHA,GALM,CAMNH,MAAM,CAANA,MANM,CAAD,CAAP,CAQA;AACD,CAlByB,CAmB1B,CAACjB,OAAD,CAnB0B,CAA5B,CAsBA,GAAMyB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,UAAD,CAAwB,CACzC;AACAX,QAAQ,CAAC3B,SAAS,CAACuC,OAAX,CAAR,CACA;AACD,CAJD,CAMA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,GAAI7B,IAAI,GAAKV,QAAQ,CAACwC,aAAtB,CAAqC,CACnCrB,sBAAsB,EAAIA,sBAAsB,EAAhD,CACAR,OAAO,CAAC,SAAC8B,QAAD,wCACHA,QADG,MAENb,MAAM,CAAE1B,UAAU,CAACwC,SAFb,IAAD,CAAP,CAID,CACF,CARD,CAUA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACjC,IAAD,CAAiB2B,UAAjB,CAAwC,CACjE,GAAMO,CAAAA,WAAsB,CAAG,CAC7BlC,IAAI,CAAJA,IAD6B,CAE7B2B,UAAU,CAAVA,UAF6B,CAG7BQ,SAAS,CAAEC,IAAI,CAACC,GAAL,EAHkB,CAA/B,CAKA1C,aAAa,CAACuC,WAAD,CAAb,CAA2BI,IAA3B,CAAgC,SAACC,QAAD,CAAc,CAC5CrC,SAAS,CAAC,SAACsC,UAAD,yDACLA,UADK,MAERC,SAAS,eAAEF,QAAQ,CAACG,EAAX,6CAAiB5C,MAAM,EAFxB,IAAD,CAAT,CAID,CALD,EAMD,CAZD,CAcA,GAAM6C,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAC5BD,EAD4B,CAE5B1C,IAF4B,CAG5B2B,UAH4B,CAI5BiB,MAJ4B,CAKzB,CACH,GAAMV,CAAAA,WAAsB,CAAG,CAC7BlC,IAAI,CAAJA,IAD6B,CAE7B2B,UAAU,CAAVA,UAF6B,CAG7BiB,MAAM,CAANA,MAH6B,CAI7BT,SAAS,CAAEC,IAAI,CAACC,GAAL,EAJkB,CAA/B,CAMAzC,gBAAgB,CAAC8C,EAAD,CAAKR,WAAL,CAAhB,CACD,CAbD,CAeA,GAAMW,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB5C,OAAO,CAAC,SAAC8B,QAAD,wCACHA,QADG,MAENb,MAAM,CAAE1B,UAAU,CAACsD,OAFb,IAAD,CAAP,CAID,CALD,CAOA,MAAO,CACL9B,QAAQ,CAARA,QADK,CAELU,UAAU,CAAVA,UAFK,CAGLmB,SAAS,CAATA,SAHK,CAILhB,OAAO,CAAPA,OAJK,CAKLnB,aAAa,CAAbA,aALK,CAMLK,SAAS,CAATA,SANK,CAOLkB,kBAAkB,CAAlBA,kBAPK,CAQLU,qBAAqB,CAArBA,qBARK,CAAP,CAUD","sourcesContent":["import { useRecoilValue, useResetRecoilState, useSetRecoilState } from \"recoil\";\r\nimport gameState from \"../recoil/atoms/gameState\";\r\nimport selectedPokemonsSelector from \"../recoil/selectors/selectedPokemonsSelector\";\r\nimport selectedPokemonsState from \"../recoil/atoms/selectedPokemonsState\";\r\nimport gameOverlayState from \"../recoil/atoms/gameOverlayState\";\r\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\r\nimport { useCallback } from \"react\";\r\nimport { GameLevel, GameMode, gameOptions, GameStatus } from \"../types/game\";\r\nimport { generatePokemonMatrix, makeListPokemons } from \"../utils/game\";\r\nimport { addNewRanking, TopPlayer, updateNewRanking } from \"../api/ranking\";\r\nimport playerState from \"../recoil/atoms/playerState\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nexport function useGameActions(mode: GameMode) {\r\n  const setGame = useSetRecoilState(gameState);\r\n  const setPlayer = useSetRecoilState(playerState);\r\n  const setSelectedPokemons = useSetRecoilState(selectedPokemonsSelector);\r\n  const resetGameState = useResetRecoilState(gameState);\r\n  const resetGameOverlayState = useResetRecoilState(gameOverlayState);\r\n  const resetSelectedPokemonsState = useResetRecoilState(selectedPokemonsState);\r\n  const { playBiteSound, playFanfareSound, playNearlyEndTimeSound } =\r\n    useRecoilValue(gameSoundState);\r\n\r\n  const selectPokemon = (\r\n    pokemonId: string,\r\n    rowIndex: number,\r\n    colIndex: number\r\n  ) => {\r\n    playBiteSound && playBiteSound();\r\n    setSelectedPokemons({ nid: pokemonId, rowIndex, colIndex });\r\n  };\r\n\r\n  const resetGame = () => {\r\n    resetGameState();\r\n    resetGameOverlayState();\r\n    resetSelectedPokemonsState();\r\n  };\r\n\r\n  const initGame = useCallback(\r\n    (level: GameLevel, status: GameStatus = GameStatus.PENDING) => {\r\n      const { row, col } = gameOptions[level];\r\n      const pokemons = makeListPokemons(row, col);\r\n      const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\r\n        pokemons,\r\n        row,\r\n        col\r\n      );\r\n      setGame({\r\n        pokemons: newPokemons,\r\n        matrix: pokemonMatrix,\r\n        level,\r\n        row,\r\n        col,\r\n        status,\r\n      });\r\n      // setPlayer((currentPlayer) => ({ ...currentPlayer, playerTiming: 0 }));\r\n    },\r\n    [setGame]\r\n  );\r\n\r\n  const replayGame = (playerName: string) => {\r\n    // playFanfareSound && playFanfareSound();\r\n    initGame(GameLevel.LEVEL_1);\r\n    // addNewRankingScore(mode, playerName);\r\n  };\r\n\r\n  const endGame = () => {\r\n    if (mode === GameMode.SURVIVAL_MODE) {\r\n      playNearlyEndTimeSound && playNearlyEndTimeSound();\r\n      setGame((prevGame) => ({\r\n        ...prevGame,\r\n        status: GameStatus.COMPLETED,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const addNewRankingScore = (mode: GameMode, playerName: string) => {\r\n    const playerScore: TopPlayer = {\r\n      mode,\r\n      playerName,\r\n      timestamp: Date.now(),\r\n    };\r\n    addNewRanking(playerScore).then((response) => {\r\n      setPlayer((prevPlayer) => ({\r\n        ...prevPlayer,\r\n        rankingId: response.id ?? nanoid(),\r\n      }));\r\n    });\r\n  };\r\n\r\n  const updateNewRankingScore = (\r\n    id: string,\r\n    mode: GameMode,\r\n    playerName: string,\r\n    timing: number\r\n  ) => {\r\n    const playerScore: TopPlayer = {\r\n      mode,\r\n      playerName,\r\n      timing,\r\n      timestamp: Date.now(),\r\n    };\r\n    updateNewRanking(id, playerScore);\r\n  };\r\n\r\n  const startGame = () => {\r\n    setGame((prevGame) => ({\r\n      ...prevGame,\r\n      status: GameStatus.RUNNING,\r\n    }));\r\n  };\r\n\r\n  return {\r\n    initGame,\r\n    replayGame,\r\n    startGame,\r\n    endGame,\r\n    selectPokemon,\r\n    resetGame,\r\n    addNewRankingScore,\r\n    updateNewRankingScore,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}