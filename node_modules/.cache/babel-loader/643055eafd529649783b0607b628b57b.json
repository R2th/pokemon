{"ast":null,"code":"import{useEffect}from\"react\";import{useLocation}from\"react-router-dom\";import{useRecoilValue,useSetRecoilState}from\"recoil\";import gameSoundState from\"../recoil/atoms/gameSoundState\";import gameState from\"../recoil/atoms/gameState\";import playerState from\"../recoil/atoms/playerState\";import{GameLevel,GameMode,GameStatus,nextLevel}from\"../types/game\";import{generatePokemonMatrix,checkCompletedLevel,hasAnyConnectLine,reShufflePokemonList}from\"../utils/game\";import{useGameActions}from\"./useGameActions\";export default function useGameEngine(mode){var location=useLocation();var _useRecoilValue=useRecoilValue(gameSoundState),playFanfareSound=_useRecoilValue.playFanfareSound,playLevelUpSound=_useRecoilValue.playLevelUpSound,playCompletedGameSound=_useRecoilValue.playCompletedGameSound,playYouWinSound=_useRecoilValue.playYouWinSound;var _useGameActions=useGameActions(mode),initGame=_useGameActions.initGame,replayGame=_useGameActions.replayGame,endGame=_useGameActions.endGame,addNewRankingScore=_useGameActions.addNewRankingScore,updateNewRankingScore=_useGameActions.updateNewRankingScore;var setGame=useSetRecoilState(gameState);var currentPlayer=useRecoilValue(playerState);var _useRecoilValue2=useRecoilValue(gameState),matrix=_useRecoilValue2.matrix,row=_useRecoilValue2.row,col=_useRecoilValue2.col,status=_useRecoilValue2.status,pokemons=_useRecoilValue2.pokemons,level=_useRecoilValue2.level;var shuffleMatrix=function shuffleMatrix(pokemons){var newShufflePokemons=reShufflePokemonList(pokemons);var _generatePokemonMatri=generatePokemonMatrix(newShufflePokemons,row,col),pokemonMatrix=_generatePokemonMatri.pokemonMatrix,newPokemons=_generatePokemonMatri.pokemons;setGame({pokemons:newPokemons,matrix:pokemonMatrix,level:level,row:row,col:col,status:GameStatus.RUNNING});};// Setup game\nuseEffect(function(){if(status===GameStatus.PENDING){// playFanfareSound && playFanfareSound();\ninitGame(level);addNewRankingScore(mode,currentPlayer.playerName);}return function(){// cleanup\n};},[status,initGame]);// Check game completed and post result\nuseEffect(function(){if(status===GameStatus.COMPLETED){if(currentPlayer.rankingId){updateNewRankingScore(currentPlayer.rankingId,mode,currentPlayer.playerName,currentPlayer.playerTiming);}}},[currentPlayer.rankingId,currentPlayer.playerTiming]);// Check completed one level and re-start new one higher level\nuseEffect(function(){if(checkCompletedLevel(pokemons)){var levelUp=nextLevel[level];if(level!==levelUp||mode===GameMode.SURVIVAL_MODE){initGame(levelUp,GameStatus.RUNNING);playCompletedGameSound&&playCompletedGameSound();}else{if(mode===GameMode.SPEED_MODE){playYouWinSound&&playYouWinSound();setGame({matrix:matrix,row:row,col:col,pokemons:pokemons,level:level,status:GameStatus.COMPLETED});}}}else{var _hasAnyConnectLine=hasAnyConnectLine(pokemons,matrix,row,col),foundConnectLine=_hasAnyConnectLine.foundConnectLine;if(Object.keys(pokemons).length&&foundConnectLine===false){shuffleMatrix(pokemons);playLevelUpSound&&playLevelUpSound();}}},[pokemons]);// Setup new game if access directly from browser\nuseEffect(function(){if(status===GameStatus.RUNNING){// playFanfareSound && playFanfareSound();\ninitGame(GameLevel.LEVEL_1);}},[location]);return{initGame:initGame,replayGame:replayGame,endGame:endGame,matrix:matrix,row:row,col:col,status:status,level:level};}","map":{"version":3,"sources":["E:/Desktop/game-pikachu-v2/src/hooks/useGameEngine.ts"],"names":["useEffect","useLocation","useRecoilValue","useSetRecoilState","gameSoundState","gameState","playerState","GameLevel","GameMode","GameStatus","nextLevel","generatePokemonMatrix","checkCompletedLevel","hasAnyConnectLine","reShufflePokemonList","useGameActions","useGameEngine","mode","location","playFanfareSound","playLevelUpSound","playCompletedGameSound","playYouWinSound","initGame","replayGame","endGame","addNewRankingScore","updateNewRankingScore","setGame","currentPlayer","matrix","row","col","status","pokemons","level","shuffleMatrix","newShufflePokemons","pokemonMatrix","newPokemons","RUNNING","PENDING","playerName","COMPLETED","rankingId","playerTiming","levelUp","SURVIVAL_MODE","SPEED_MODE","foundConnectLine","Object","keys","length","LEVEL_1"],"mappings":"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","sourcesContent":["import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport gameSoundState from \"../recoil/atoms/gameSoundState\";\r\nimport gameState from \"../recoil/atoms/gameState\";\r\nimport playerState from \"../recoil/atoms/playerState\";\r\nimport {\r\n  GameLevel,\r\n  GameMode,\r\n  GameStatus,\r\n  nextLevel,\r\n  Pokemon,\r\n} from \"../types/game\";\r\nimport {\r\n  generatePokemonMatrix,\r\n  checkCompletedLevel,\r\n  hasAnyConnectLine,\r\n  reShufflePokemonList,\r\n} from \"../utils/game\";\r\nimport { useGameActions } from \"./useGameActions\";\r\n\r\nexport default function useGameEngine(mode: GameMode) {\r\n  const location = useLocation();\r\n  const {\r\n    playFanfareSound,\r\n    playLevelUpSound,\r\n    playCompletedGameSound,\r\n    playYouWinSound,\r\n  } = useRecoilValue(gameSoundState);\r\n  const {\r\n    initGame,\r\n    replayGame,\r\n    endGame,\r\n    addNewRankingScore,\r\n    updateNewRankingScore,\r\n  } = useGameActions(mode);\r\n  const setGame = useSetRecoilState(gameState);\r\n  const currentPlayer = useRecoilValue(playerState);\r\n  const { matrix, row, col, status, pokemons, level } =\r\n    useRecoilValue(gameState);\r\n  const shuffleMatrix = (pokemons: Record<string, Pokemon>) => {\r\n    const newShufflePokemons = reShufflePokemonList(pokemons);\r\n    const { pokemonMatrix, pokemons: newPokemons } = generatePokemonMatrix(\r\n      newShufflePokemons,\r\n      row,\r\n      col\r\n    );\r\n    setGame({\r\n      pokemons: newPokemons,\r\n      matrix: pokemonMatrix,\r\n      level,\r\n      row,\r\n      col,\r\n      status: GameStatus.RUNNING,\r\n    });\r\n  };\r\n\r\n  // Setup game\r\n  useEffect(() => {\r\n    if (status === GameStatus.PENDING) {\r\n      // playFanfareSound && playFanfareSound();\r\n      initGame(level);\r\n      addNewRankingScore(mode, currentPlayer.playerName);\r\n    }\r\n    return () => {\r\n      // cleanup\r\n    };\r\n  }, [status, initGame]);\r\n\r\n  // Check game completed and post result\r\n  useEffect(() => {\r\n    if (status === GameStatus.COMPLETED) {\r\n      if (currentPlayer.rankingId) {\r\n        updateNewRankingScore(\r\n          currentPlayer.rankingId,\r\n          mode,\r\n          currentPlayer.playerName,\r\n          currentPlayer.playerTiming\r\n        );\r\n      }\r\n    }\r\n  }, [currentPlayer.rankingId, currentPlayer.playerTiming]);\r\n\r\n  // Check completed one level and re-start new one higher level\r\n  useEffect(() => {\r\n    if (checkCompletedLevel(pokemons)) {\r\n      const levelUp: GameLevel = nextLevel[level];\r\n      if (level !== levelUp || mode === GameMode.SURVIVAL_MODE) {\r\n        initGame(levelUp, GameStatus.RUNNING);\r\n        playCompletedGameSound && playCompletedGameSound();\r\n      } else {\r\n        if (mode === GameMode.SPEED_MODE) {\r\n          playYouWinSound && playYouWinSound();\r\n          setGame({\r\n            matrix,\r\n            row,\r\n            col,\r\n            pokemons,\r\n            level,\r\n            status: GameStatus.COMPLETED,\r\n          });\r\n        }\r\n      }\r\n    } else {\r\n      const { foundConnectLine } = hasAnyConnectLine(\r\n        pokemons,\r\n        matrix,\r\n        row,\r\n        col\r\n      );\r\n      if (Object.keys(pokemons).length && foundConnectLine === false) {\r\n        shuffleMatrix(pokemons);\r\n        playLevelUpSound && playLevelUpSound();\r\n      }\r\n    }\r\n  }, [pokemons]);\r\n\r\n  // Setup new game if access directly from browser\r\n  useEffect(() => {\r\n    if (status === GameStatus.RUNNING) {\r\n      // playFanfareSound && playFanfareSound();\r\n      initGame(GameLevel.LEVEL_1);\r\n    }\r\n  }, [location]);\r\n\r\n  return {\r\n    initGame,\r\n    replayGame,\r\n    endGame,\r\n    matrix,\r\n    row,\r\n    col,\r\n    status,\r\n    level,\r\n  };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}