{"ast":null,"code":"import{memo,useEffect,useRef}from\"react\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var LineCard=function LineCard(_ref){var point=_ref.point,suggested=_ref.suggested,rowIndex=_ref.rowIndex,colIndex=_ref.colIndex;var type=point&&point.type?\"\".concat(point.type,\"-point\"):\"\";var direction=point&&point.direction?\"\".concat(point.direction,\"-direction\"):\"\";var pointClass=point?\"in-line \".concat(direction,\" \").concat(type):\"\";var suggestedClass=suggested?\"suggested\":pointClass;var lineRef=useRef(null);useEffect(function(){setTimeout(function(){if(lineRef.current){direction&&lineRef.current.classList.remove(direction);type&&lineRef.current.classList.remove(type);}},300);return function(){};},[lineRef,direction,type]);return/*#__PURE__*/_jsx(\"div\",{ref:lineRef,className:\"line-card \".concat(suggestedClass),children:/*#__PURE__*/_jsxs(\"strong\",{children:[rowIndex,\",\",colIndex]})});};function propsAreEquals(prevProps,nextProps){var _prevProps$point,_nextProps$point,_prevProps$point2,_nextProps$point2;if(prevProps.point===undefined&&nextProps.point===undefined){return prevProps.suggested===nextProps.suggested;}return prevProps.suggested===nextProps.suggested&&((_prevProps$point=prevProps.point)===null||_prevProps$point===void 0?void 0:_prevProps$point.direction)===((_nextProps$point=nextProps.point)===null||_nextProps$point===void 0?void 0:_nextProps$point.direction)&&((_prevProps$point2=prevProps.point)===null||_prevProps$point2===void 0?void 0:_prevProps$point2.type)===((_nextProps$point2=nextProps.point)===null||_nextProps$point2===void 0?void 0:_nextProps$point2.type);}export default/*#__PURE__*/memo(LineCard,propsAreEquals);","map":{"version":3,"sources":["E:/Desktop/game-pikachu-v2/src/components/Game/LineCard.tsx"],"names":["memo","useEffect","useRef","LineCard","point","suggested","rowIndex","colIndex","type","direction","pointClass","suggestedClass","lineRef","setTimeout","current","classList","remove","propsAreEquals","prevProps","nextProps","undefined"],"mappings":"AAAA,OAAaA,IAAb,CAAmBC,SAAnB,CAA8BC,MAA9B,KAA4C,OAA5C,C,wFAUA,GAAMC,CAAAA,QAA2B,CAAG,QAA9BA,CAAAA,QAA8B,MAK9B,IAJJC,CAAAA,KAII,MAJJA,KAII,CAHJC,SAGI,MAHJA,SAGI,CAFJC,QAEI,MAFJA,QAEI,CADJC,QACI,MADJA,QACI,CACJ,GAAMC,CAAAA,IAAI,CAAGJ,KAAK,EAAIA,KAAK,CAACI,IAAf,WAAyBJ,KAAK,CAACI,IAA/B,WAA8C,EAA3D,CACA,GAAMC,CAAAA,SAAS,CACbL,KAAK,EAAIA,KAAK,CAACK,SAAf,WAA8BL,KAAK,CAACK,SAApC,eAA4D,EAD9D,CAEA,GAAMC,CAAAA,UAAU,CAAGN,KAAK,mBAAcK,SAAd,aAA2BD,IAA3B,EAAoC,EAA5D,CACA,GAAMG,CAAAA,cAAc,CAAGN,SAAS,aAAiBK,UAAjD,CACA,GAAME,CAAAA,OAAO,CAAGV,MAAM,CAAiB,IAAjB,CAAtB,CACAD,SAAS,CAAC,UAAM,CACdY,UAAU,CAAC,UAAM,CACf,GAAID,OAAO,CAACE,OAAZ,CAAqB,CACnBL,SAAS,EAAIG,OAAO,CAACE,OAAR,CAAgBC,SAAhB,CAA0BC,MAA1B,CAAiCP,SAAjC,CAAb,CACAD,IAAI,EAAII,OAAO,CAACE,OAAR,CAAgBC,SAAhB,CAA0BC,MAA1B,CAAiCR,IAAjC,CAAR,CACD,CACF,CALS,CAKP,GALO,CAAV,CAMA,MAAO,WAAM,CAAE,CAAf,CACD,CARQ,CAQN,CAACI,OAAD,CAAUH,SAAV,CAAqBD,IAArB,CARM,CAAT,CAUA,mBACE,YAAK,GAAG,CAAEI,OAAV,CAAmB,SAAS,qBAAeD,cAAf,CAA5B,uBACE,0BACGL,QADH,KACcC,QADd,GADF,EADF,CAOD,CA7BD,CA+BA,QAASU,CAAAA,cAAT,CAAwBC,SAAxB,CAAkDC,SAAlD,CAA4E,2EAC1E,GAAID,SAAS,CAACd,KAAV,GAAoBgB,SAApB,EAAiCD,SAAS,CAACf,KAAV,GAAoBgB,SAAzD,CAAoE,CAClE,MAAOF,CAAAA,SAAS,CAACb,SAAV,GAAwBc,SAAS,CAACd,SAAzC,CACD,CAED,MACEa,CAAAA,SAAS,CAACb,SAAV,GAAwBc,SAAS,CAACd,SAAlC,EACA,mBAAAa,SAAS,CAACd,KAAV,4DAAiBK,SAAjB,uBAA+BU,SAAS,CAACf,KAAzC,2CAA+B,iBAAiBK,SAAhD,CADA,EAEA,oBAAAS,SAAS,CAACd,KAAV,8DAAiBI,IAAjB,wBAA0BW,SAAS,CAACf,KAApC,4CAA0B,kBAAiBI,IAA3C,CAHF,CAKD,CAED,2BAAeR,IAAI,CAACG,QAAD,CAAWc,cAAX,CAAnB","sourcesContent":["import { FC, memo, useEffect, useRef } from \"react\";\r\nimport { PointCoords } from \"../../types/game\";\r\n\r\ntype LineCardProps = {\r\n  point?: PointCoords;\r\n  suggested: boolean;\r\n  rowIndex: number;\r\n  colIndex: number;\r\n};\r\n\r\nconst LineCard: FC<LineCardProps> = ({\r\n  point,\r\n  suggested,\r\n  rowIndex,\r\n  colIndex,\r\n}) => {\r\n  const type = point && point.type ? `${point.type}-point` : \"\";\r\n  const direction =\r\n    point && point.direction ? `${point.direction}-direction` : \"\";\r\n  const pointClass = point ? `in-line ${direction} ${type}` : \"\";\r\n  const suggestedClass = suggested ? `suggested` : pointClass;\r\n  const lineRef = useRef<HTMLDivElement>(null);\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      if (lineRef.current) {\r\n        direction && lineRef.current.classList.remove(direction);\r\n        type && lineRef.current.classList.remove(type);\r\n      }\r\n    }, 300);\r\n    return () => {};\r\n  }, [lineRef, direction, type]);\r\n\r\n  return (\r\n    <div ref={lineRef} className={`line-card ${suggestedClass}`}>\r\n      <strong>\r\n        {rowIndex},{colIndex}\r\n      </strong>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction propsAreEquals(prevProps: LineCardProps, nextProps: LineCardProps) {\r\n  if (prevProps.point === undefined && nextProps.point === undefined) {\r\n    return prevProps.suggested === nextProps.suggested;\r\n  }\r\n\r\n  return (\r\n    prevProps.suggested === nextProps.suggested &&\r\n    prevProps.point?.direction === nextProps.point?.direction &&\r\n    prevProps.point?.type === nextProps.point?.type\r\n  );\r\n}\r\n\r\nexport default memo(LineCard, propsAreEquals);\r\n"]},"metadata":{},"sourceType":"module"}